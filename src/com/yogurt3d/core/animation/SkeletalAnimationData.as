/*
 * SkeletalAnimationData.as
 * This file is part of Yogurt3D Flash Rendering Engine 
 *
 * Copyright (C) 2011 - Yogurt3D Corp.
 *
 * Yogurt3D Flash Rendering Engine is free software; you can redistribute it and/or
 * modify it under the terms of the YOGURT3D CLICK-THROUGH AGREEMENT
 * License.
 * 
 * Yogurt3D Flash Rendering Engine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * 
 * You should have received a copy of the YOGURT3D CLICK-THROUGH AGREEMENT
 * License along with this library. If not, see <http://www.yogurt3d.com/yogurt3d/downloads/yogurt3d-click-through-agreement.html>. 
 */

package com.yogurt3d.core.animation
{
	import flash.geom.Vector3D;
	import flash.utils.Dictionary;
	
	import com.yogurt3d.core.managers.IDManager;
	import com.yogurt3d.core.objects.EngineObject;
	import com.yogurt3d.core.sceneobjects.transformations.Quaternion;
	
	/**
	  * Data file containing an animation. 
	  * This file stores bone orientation data for each bone at each frame.
	  * It also defines the animations frameRate.<br/>
	  * 
	  * This class is usually generated by the YOA_Parser
	  * 
	  * @see com.yogurt3d.io.parsers.YOA_Parser
	  * 
 	  * @author Yogurt3D Engine Core Team
 	  * @company Yogurt3D Corp.
 	  **/
	public class SkeletalAnimationData extends EngineObject
	{
		public var frameData:Vector.<Dictionary>;
		
		public var frameRate:uint = 24;
		
		public function SkeletalAnimationData(_initInternals:Boolean=true)
		{
			super(_initInternals);
			frameData = new Vector.<Dictionary>();
		}
		
		public function addBoneData(frame:int, boneName:String, _translation:Vector3D, _rotation:Quaternion, _scale:Vector3D):void{
			if( frame>frameData.length-1 || frameData[frame] == null )
			{
				frameData[frame] = new Dictionary();
			}

			frameData[frame][boneName] = {translation:_translation, rotation:_rotation, scale:_scale};
		}
		
		protected override function trackObject():void
		{
			IDManager.trackObject(this, SkeletalAnimationData);
		}
	}
}
